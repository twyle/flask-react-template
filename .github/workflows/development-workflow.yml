# **************************************************************************************************************** #
# This workflow will install Python dependencies, and run pytest --cov on all files recursively from the pytest-root-dir
# The workflow is also configured to exit with error if minimum individual file or total pytest coverage minimum not met
# If the workflow exits with error, an informative issue is created for the repo alerting the user
# If the workflow succeeds, a commit message is generated with the pytest --cov markdown table
#
# Variables to set:
#   * pytester action:
#     * pytest-root-dir: top-level directory to recursively check all .py files for pytest --cov
#     * cov-omit-list: comma separated str of all files and/or dirs to ignore
#   * env:
#     * cov-threshold-single: minimum individual file coverage required
#     * cov-threshold-total: minimum total coverage required
#
# Action outputs:
#   * output-table: `pytest --cov` markdown output table
#   * cov-threshold-single-fail: `false` if any single file coverage less than `cov-threshold-single`, else `true`
#   * cov-threshold-total-fail: `false` if total coverage less than `cov-threshold-total`, else `true`
#
# Workflows used:
#   * actions/checkout@v2: checkout files to perform additional actions on
#   * alexanderdamiani/pytester-cov@v1.2.3: runs pytest --cov and associated functions
#   * nashmaniac/create-issue-action@v1.1: creates issue for repo
#   * peter-evans/commit-comment@v1: adds message to commit
# **************************************************************************************************************** #

name: Flask React Development Build

on:
  pull_request:
    branches: [ development ]
  workflow_dispatch:

env:
  APP_NAME: flask-react-template

jobs:
  Build-Frontend:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - name: Development Code
        uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: |
          cd api-client
          npm install

      - name: Build
        run: |
          cd api-client
          npm run build 

      - name: Update Backend
        run: |
          #cd api-server/api && mkdir static
          #cd ../..
          #dir
          cp -r api-client/build/* api-server/api/static/

      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Copied the build folder into the static folder.

  Build-Backend:
    runs-on: ubuntu-latest
    needs: [Build-Frontend]

    steps:

    - uses: actions/checkout@v2

    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        cd api-server
        python -m pip install --upgrade pip
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Run the linters
      run: |
        cd api-server
        flake8
        pylint --rcfile=setup.cfg api/

    - name: Test with pytest
      run: |
        cd api-server
        if [ -d tests ] || [ -d test ]; then SECRET_KEY=${{secrets.SECRET_KEY}} FLASK_ENV=${{secrets.FLASK_ENV}} python -m pytest; fi

  DeployDev:
    name: Deploy to Dev 
    if: github.event_name == 'pull_request'
    needs: [Build-Backend]
    runs-on: ubuntu-latest
    environment: 
      name: Development
      url: 'https://${{env.APP_NAME}}-dev.herokuapp.com/'
    steps:
      - name: Deploy
        run: echo I am deploying ${{ env.APP_NAME }} at https://${{env.APP_NAME}}-dev.herokuapp.com/
      - uses: actions/checkout@v2
      - uses: akhileshns/heroku-deploy@v3.12.12 # This is the action
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: "${{ env.APP_NAME }}-dev" #Must be unique in Heroku
          heroku_email: "${{ secrets.HEROKU_EMAIL }}"
          appdir: "api-server"
        env:
          HD_FLASK_ENV: ${{secrets.FLASK_ENV}}
          HD_SECRET_KEY: ${{secrets.SECRET_KEY}}
