# **************************************************************************************************************** #
# This workflow will install Python dependencies, and run pytest --cov on all files recursively from the pytest-root-dir
# The workflow is also configured to exit with error if minimum individual file or total pytest coverage minimum not met
# If the workflow exits with error, an informative issue is created for the repo alerting the user
# If the workflow succeeds, a commit message is generated with the pytest --cov markdown table
#
# Variables to set:
#   * pytester action:
#     * pytest-root-dir: top-level directory to recursively check all .py files for pytest --cov
#     * cov-omit-list: comma separated str of all files and/or dirs to ignore
#   * env:
#     * cov-threshold-single: minimum individual file coverage required
#     * cov-threshold-total: minimum total coverage required
#
# Action outputs:
#   * output-table: `pytest --cov` markdown output table
#   * cov-threshold-single-fail: `false` if any single file coverage less than `cov-threshold-single`, else `true`
#   * cov-threshold-total-fail: `false` if total coverage less than `cov-threshold-total`, else `true`
#
# Workflows used:
#   * actions/checkout@v2: checkout files to perform additional actions on
#   * alexanderdamiani/pytester-cov@v1.2.3: runs pytest --cov and associated functions
#   * nashmaniac/create-issue-action@v1.1: creates issue for repo
#   * peter-evans/commit-comment@v1: adds message to commit
# **************************************************************************************************************** #

name: Flask React Feature Development Build

on:
  push:
    branches-ignore: [development, staging, production, release]
  workflow_dispatch:

jobs:
  Build-Frontend:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - name: Development Code
        uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: |
          cd api-client
          npm install

      - name: Build
        run: |
          cd api-client
          npm run build --if-present

      - name: Update Backend
        run: |
          cp -r api-client/build/* api-server/api/static/

  Build-Backend:
    runs-on: ubuntu-latest
    needs: [Build-Frontend]

    steps:

    - uses: actions/checkout@v2

    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        cd api-server
        python -m pip install --upgrade pip
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Sort Project dependencies
      run: |
        cd api-server
        isort .

    - name: commit isort changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add -A && git diff-index --cached --quiet HEAD || git commit -m 'isort'

    - name: push isort changes
      uses: ad-m/github-push-action@v0.5.0
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }}

    - name: Run the linters
      run: |
        cd api-server
        flake8
        pylint --rcfile=setup.cfg api/

    - name: Test with pytest
      run: |
        cd api-server
        if [ -d tests ] || [ -d test ]; then SECRET_KEY=${{secrets.SECRET_KEY}} FLASK_ENV=${{secrets.FLASK_ENV}} python -m pytest; fi
